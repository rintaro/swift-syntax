//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

/// Enumerates the kinds of tokens in the Swift language.
public enum TokenKind: Hashable {
  case arrow
  case atSign
  case backslash
  case backtick
  case binaryOperator(String)
  case colon
  case comma
  case dollarIdentifier(String)
  case ellipsis
  case endOfFile
  case equal
  case exclamationMark
  case floatLiteral(String)
  case identifier(String)
  case infixQuestionMark
  case integerLiteral(String)
  case keyword(Keyword)
  case leftAngle
  case leftBrace
  case leftParen
  case leftSquare
  case multilineStringQuote
  case period
  case postfixOperator(String)
  case postfixQuestionMark
  case pound
  case poundAvailable
  case poundElse
  case poundElseif
  case poundEndif
  case poundIf
  case poundSourceLocation
  case poundUnavailable
  case prefixAmpersand
  case prefixOperator(String)
  case rawStringPoundDelimiter(String)
  case regexLiteralPattern(String)
  case regexPoundDelimiter(String)
  case regexSlash
  case rightAngle
  case rightBrace
  case rightParen
  case rightSquare
  case semicolon
  case shebang(String)
  case singleQuote
  case stringQuote
  case stringSegment(String)
  case unknown(String)
  case wildcard
  
  /// The textual representation of this token kind.
  @_spi(Testing)
  public var text: String {
    switch self {
    case .arrow:
      return "->"
    case .atSign:
      return "@"
    case .backslash:
      return #"\"#
    case .backtick:
      return "`"
    case .binaryOperator(let text):
      return text
    case .colon:
      return ":"
    case .comma:
      return ","
    case .dollarIdentifier(let text):
      return text
    case .ellipsis:
      return "..."
    case .endOfFile:
      return ""
    case .equal:
      return "="
    case .exclamationMark:
      return "!"
    case .floatLiteral(let text):
      return text
    case .identifier(let text):
      return text
    case .infixQuestionMark:
      return "?"
    case .integerLiteral(let text):
      return text
    case .keyword(let assoc):
      return String(syntaxText: assoc.defaultText)
    case .leftAngle:
      return "<"
    case .leftBrace:
      return "{"
    case .leftParen:
      return "("
    case .leftSquare:
      return "["
    case .multilineStringQuote:
      return #"""""#
    case .period:
      return "."
    case .postfixOperator(let text):
      return text
    case .postfixQuestionMark:
      return "?"
    case .pound:
      return "#"
    case .poundAvailable:
      return "#available"
    case .poundElse:
      return "#else"
    case .poundElseif:
      return "#elseif"
    case .poundEndif:
      return "#endif"
    case .poundIf:
      return "#if"
    case .poundSourceLocation:
      return "#sourceLocation"
    case .poundUnavailable:
      return "#unavailable"
    case .prefixAmpersand:
      return "&"
    case .prefixOperator(let text):
      return text
    case .rawStringPoundDelimiter(let text):
      return text
    case .regexLiteralPattern(let text):
      return text
    case .regexPoundDelimiter(let text):
      return text
    case .regexSlash:
      return "/"
    case .rightAngle:
      return ">"
    case .rightBrace:
      return "}"
    case .rightParen:
      return ")"
    case .rightSquare:
      return "]"
    case .semicolon:
      return ";"
    case .shebang(let text):
      return text
    case .singleQuote:
      return "'"
    case .stringQuote:
      return #"""#
    case .stringSegment(let text):
      return text
    case .unknown(let text):
      return text
    case .wildcard:
      return "_"
    }
  }
  
  /// If this token kind always has the same syntax text, that syntax text, otherwise `nil`.
  @_spi(RawSyntax)
  public var defaultText: SyntaxText? {
    switch self {
    case .arrow:
      return "->"
    case .atSign:
      return "@"
    case .backslash:
      return #"\"#
    case .backtick:
      return "`"
    case .colon:
      return ":"
    case .comma:
      return ","
    case .ellipsis:
      return "..."
    case .endOfFile:
      return ""
    case .equal:
      return "="
    case .exclamationMark:
      return "!"
    case .infixQuestionMark:
      return "?"
    case .keyword(let assoc):
      return assoc.defaultText
    case .leftAngle:
      return "<"
    case .leftBrace:
      return "{"
    case .leftParen:
      return "("
    case .leftSquare:
      return "["
    case .multilineStringQuote:
      return #"""""#
    case .period:
      return "."
    case .postfixQuestionMark:
      return "?"
    case .pound:
      return "#"
    case .poundAvailable:
      return "#available"
    case .poundElse:
      return "#else"
    case .poundElseif:
      return "#elseif"
    case .poundEndif:
      return "#endif"
    case .poundIf:
      return "#if"
    case .poundSourceLocation:
      return "#sourceLocation"
    case .poundUnavailable:
      return "#unavailable"
    case .prefixAmpersand:
      return "&"
    case .regexSlash:
      return "/"
    case .rightAngle:
      return ">"
    case .rightBrace:
      return "}"
    case .rightParen:
      return ")"
    case .rightSquare:
      return "]"
    case .semicolon:
      return ";"
    case .singleQuote:
      return "'"
    case .stringQuote:
      return #"""#
    case .wildcard:
      return "_"
    default:
      return ""
    }
  }
  
  /// Returns `true` if the token is a Swift punctuator.
  ///
  /// Punctuation tokens generally separate identifiers from each other. For
  /// example, the '<' and '>' characters in a generic parameter list, or the
  /// quote characters in a string literal.
  public var isPunctuation: Bool {
    switch self {
    case .arrow:
      return true
    case .atSign:
      return true
    case .backslash:
      return true
    case .backtick:
      return true
    case .binaryOperator:
      return false
    case .colon:
      return true
    case .comma:
      return true
    case .dollarIdentifier:
      return false
    case .ellipsis:
      return true
    case .endOfFile:
      return false
    case .equal:
      return true
    case .exclamationMark:
      return true
    case .floatLiteral:
      return false
    case .identifier:
      return false
    case .infixQuestionMark:
      return true
    case .integerLiteral:
      return false
    case .keyword:
      return false
    case .leftAngle:
      return true
    case .leftBrace:
      return true
    case .leftParen:
      return true
    case .leftSquare:
      return true
    case .multilineStringQuote:
      return true
    case .period:
      return true
    case .postfixOperator:
      return false
    case .postfixQuestionMark:
      return true
    case .pound:
      return true
    case .poundAvailable:
      return false
    case .poundElse:
      return false
    case .poundElseif:
      return false
    case .poundEndif:
      return false
    case .poundIf:
      return false
    case .poundSourceLocation:
      return false
    case .poundUnavailable:
      return false
    case .prefixAmpersand:
      return true
    case .prefixOperator:
      return false
    case .rawStringPoundDelimiter:
      return false
    case .regexLiteralPattern:
      return false
    case .regexPoundDelimiter:
      return false
    case .regexSlash:
      return true
    case .rightAngle:
      return true
    case .rightBrace:
      return true
    case .rightParen:
      return true
    case .rightSquare:
      return true
    case .semicolon:
      return true
    case .shebang:
      return false
    case .singleQuote:
      return true
    case .stringQuote:
      return true
    case .stringSegment:
      return false
    case .unknown:
      return false
    case .wildcard:
      return false
    }
  }
}

extension TokenKind: Equatable {
  public static func == (lhs: TokenKind, rhs: TokenKind) -> Bool {
    switch (lhs, rhs) {
    case (.arrow, .arrow):
      return true
    case (.atSign, .atSign):
      return true
    case (.backslash, .backslash):
      return true
    case (.backtick, .backtick):
      return true
    case (.binaryOperator(let lhsText), .binaryOperator(let rhsText)):
      return lhsText == rhsText
    case (.colon, .colon):
      return true
    case (.comma, .comma):
      return true
    case (.dollarIdentifier(let lhsText), .dollarIdentifier(let rhsText)):
      return lhsText == rhsText
    case (.ellipsis, .ellipsis):
      return true
    case (.endOfFile, .endOfFile):
      return true
    case (.equal, .equal):
      return true
    case (.exclamationMark, .exclamationMark):
      return true
    case (.floatLiteral(let lhsText), .floatLiteral(let rhsText)):
      return lhsText == rhsText
    case (.identifier(let lhsText), .identifier(let rhsText)):
      return lhsText == rhsText
    case (.infixQuestionMark, .infixQuestionMark):
      return true
    case (.integerLiteral(let lhsText), .integerLiteral(let rhsText)):
      return lhsText == rhsText
    case (.keyword(let lhsText), .keyword(let rhsText)):
      return lhsText == rhsText
    case (.leftAngle, .leftAngle):
      return true
    case (.leftBrace, .leftBrace):
      return true
    case (.leftParen, .leftParen):
      return true
    case (.leftSquare, .leftSquare):
      return true
    case (.multilineStringQuote, .multilineStringQuote):
      return true
    case (.period, .period):
      return true
    case (.postfixOperator(let lhsText), .postfixOperator(let rhsText)):
      return lhsText == rhsText
    case (.postfixQuestionMark, .postfixQuestionMark):
      return true
    case (.pound, .pound):
      return true
    case (.poundAvailable, .poundAvailable):
      return true
    case (.poundElse, .poundElse):
      return true
    case (.poundElseif, .poundElseif):
      return true
    case (.poundEndif, .poundEndif):
      return true
    case (.poundIf, .poundIf):
      return true
    case (.poundSourceLocation, .poundSourceLocation):
      return true
    case (.poundUnavailable, .poundUnavailable):
      return true
    case (.prefixAmpersand, .prefixAmpersand):
      return true
    case (.prefixOperator(let lhsText), .prefixOperator(let rhsText)):
      return lhsText == rhsText
    case (.rawStringPoundDelimiter(let lhsText), .rawStringPoundDelimiter(let rhsText)):
      return lhsText == rhsText
    case (.regexLiteralPattern(let lhsText), .regexLiteralPattern(let rhsText)):
      return lhsText == rhsText
    case (.regexPoundDelimiter(let lhsText), .regexPoundDelimiter(let rhsText)):
      return lhsText == rhsText
    case (.regexSlash, .regexSlash):
      return true
    case (.rightAngle, .rightAngle):
      return true
    case (.rightBrace, .rightBrace):
      return true
    case (.rightParen, .rightParen):
      return true
    case (.rightSquare, .rightSquare):
      return true
    case (.semicolon, .semicolon):
      return true
    case (.shebang(let lhsText), .shebang(let rhsText)):
      return lhsText == rhsText
    case (.singleQuote, .singleQuote):
      return true
    case (.stringQuote, .stringQuote):
      return true
    case (.stringSegment(let lhsText), .stringSegment(let rhsText)):
      return lhsText == rhsText
    case (.unknown(let lhsText), .unknown(let rhsText)):
      return lhsText == rhsText
    case (.wildcard, .wildcard):
      return true
    default:
      return false
    }
  }
}

// Note: It's important that this enum is marked as having a raw base kind
// because it significantly improves performance when comparing two
// `RawTokenBaseKind` for equality. With the raw value, it compiles down to
// a primitive integer compare, without, it calls into `__derived_enum_equals`.
@frozen // FIXME: Not actually stable, works around a miscompile
@_spi(RawSyntax)
public enum RawTokenKind: UInt16, Equatable, Hashable {
  case arrow
  case atSign
  case backslash
  case backtick
  case binaryOperator
  case colon
  case comma
  case dollarIdentifier
  case ellipsis
  case endOfFile
  case equal
  case exclamationMark
  case floatLiteral
  case identifier
  case infixQuestionMark
  case integerLiteral
  case leftAngle
  case leftBrace
  case leftParen
  case leftSquare
  case multilineStringQuote
  case period
  case postfixOperator
  case postfixQuestionMark
  case pound
  case poundAvailable
  case poundElse
  case poundElseif
  case poundEndif
  case poundIf
  case poundSourceLocation
  case poundUnavailable
  case prefixAmpersand
  case prefixOperator
  case rawStringPoundDelimiter
  case regexLiteralPattern
  case regexPoundDelimiter
  case regexSlash
  case rightAngle
  case rightBrace
  case rightParen
  case rightSquare
  case semicolon
  case shebang
  case singleQuote
  case stringQuote
  case stringSegment
  case unknown
  case wildcard
  case __consumingKeyword
  case __ownedKeyword
  case __setter_accessKeyword
  case __sharedKeyword
  case _alignmentKeyword
  case _backDeployKeyword
  case _borrowKeyword
  case _borrowingKeyword
  case _cdeclKeyword
  case _ClassKeyword
  case _compilerInitializedKeyword
  case _constKeyword
  case _consumingKeyword
  case _documentationKeyword
  case _dynamicReplacementKeyword
  case _effectsKeyword
  case _exposeKeyword
  case _forwardKeyword
  case _implementsKeyword
  case _linearKeyword
  case _localKeyword
  case _modifyKeyword
  case _moveKeyword
  case _mutatingKeyword
  case _NativeClassKeyword
  case _NativeRefCountedObjectKeyword
  case _noMetadataKeyword
  case _nonSendableKeyword
  case _objcImplementationKeyword
  case _objcRuntimeNameKeyword
  case _opaqueReturnTypeOfKeyword
  case _optimizeKeyword
  case _originallyDefinedInKeyword
  case _PackageDescriptionKeyword
  case _privateKeyword
  case _projectedValuePropertyKeyword
  case _readKeyword
  case _RefCountedObjectKeyword
  case _semanticsKeyword
  case _specializeKeyword
  case _spiKeyword
  case _spi_availableKeyword
  case _swift_native_objc_runtime_baseKeyword
  case _TrivialKeyword
  case _TrivialAtMostKeyword
  case _typeEraserKeyword
  case _unavailableFromAsyncKeyword
  case _underlyingVersionKeyword
  case _UnknownLayoutKeyword
  case _versionKeyword
  case accessesKeyword
  case actorKeyword
  case addressWithNativeOwnerKeyword
  case addressWithOwnerKeyword
  case anyKeyword
  case AnyKeyword
  case asKeyword
  case assignmentKeyword
  case associatedtypeKeyword
  case associativityKeyword
  case asyncKeyword
  case attachedKeyword
  case autoclosureKeyword
  case availabilityKeyword
  case availableKeyword
  case awaitKeyword
  case backDeployedKeyword
  case beforeKeyword
  case blockKeyword
  case borrowingKeyword
  case breakKeyword
  case canImportKeyword
  case caseKeyword
  case catchKeyword
  case classKeyword
  case compilerKeyword
  case consumeKeyword
  case copyKeyword
  case consumingKeyword
  case continueKeyword
  case convenienceKeyword
  case conventionKeyword
  case cTypeKeyword
  case defaultKeyword
  case deferKeyword
  case deinitKeyword
  case deprecatedKeyword
  case derivativeKeyword
  case didSetKeyword
  case differentiableKeyword
  case distributedKeyword
  case doKeyword
  case dynamicKeyword
  case eachKeyword
  case elseKeyword
  case enumKeyword
  case escapingKeyword
  case exclusivityKeyword
  case exportedKeyword
  case extensionKeyword
  case fallthroughKeyword
  case falseKeyword
  case fileKeyword
  case fileprivateKeyword
  case finalKeyword
  case forKeyword
  case discardKeyword
  case forwardKeyword
  case funcKeyword
  case getKeyword
  case guardKeyword
  case higherThanKeyword
  case ifKeyword
  case importKeyword
  case inKeyword
  case indirectKeyword
  case infixKeyword
  case initKeyword
  case initializesKeyword
  case inlineKeyword
  case inoutKeyword
  case internalKeyword
  case introducedKeyword
  case isKeyword
  case isolatedKeyword
  case kindKeyword
  case lazyKeyword
  case leftKeyword
  case letKeyword
  case lineKeyword
  case linearKeyword
  case lowerThanKeyword
  case macroKeyword
  case messageKeyword
  case metadataKeyword
  case moduleKeyword
  case mutableAddressWithNativeOwnerKeyword
  case mutableAddressWithOwnerKeyword
  case mutatingKeyword
  case nilKeyword
  case noasyncKeyword
  case noDerivativeKeyword
  case noescapeKeyword
  case noneKeyword
  case nonisolatedKeyword
  case nonmutatingKeyword
  case objcKeyword
  case obsoletedKeyword
  case ofKeyword
  case openKeyword
  case operatorKeyword
  case optionalKeyword
  case overrideKeyword
  case packageKeyword
  case postfixKeyword
  case precedencegroupKeyword
  case prefixKeyword
  case privateKeyword
  case ProtocolKeyword
  case protocolKeyword
  case publicKeyword
  case reasyncKeyword
  case renamedKeyword
  case repeatKeyword
  case requiredKeyword
  case _resultDependsOnKeyword
  case _resultDependsOnSelfKeyword
  case rethrowsKeyword
  case retroactiveKeyword
  case returnKeyword
  case reverseKeyword
  case rightKeyword
  case safeKeyword
  case selfKeyword
  case SelfKeyword
  case SendableKeyword
  case setKeyword
  case someKeyword
  case sourceFileKeyword
  case spiKeyword
  case spiModuleKeyword
  case staticKeyword
  case structKeyword
  case subscriptKeyword
  case superKeyword
  case swiftKeyword
  case switchKeyword
  case targetKeyword
  case thenKeyword
  case throwKeyword
  case throwsKeyword
  case transposeKeyword
  case trueKeyword
  case tryKeyword
  case TypeKeyword
  case typealiasKeyword
  case unavailableKeyword
  case uncheckedKeyword
  case unownedKeyword
  case unsafeKeyword
  case unsafeAddressKeyword
  case unsafeMutableAddressKeyword
  case varKeyword
  case visibilityKeyword
  case weakKeyword
  case whereKeyword
  case whileKeyword
  case willSetKeyword
  case witness_methodKeyword
  case wrtKeyword
  case yieldKeyword
  
  public var defaultText: SyntaxText? {
    switch self {
    case .arrow:
      return "->"
    case .atSign:
      return "@"
    case .backslash:
      return #"\"#
    case .backtick:
      return "`"
    case .colon:
      return ":"
    case .comma:
      return ","
    case .ellipsis:
      return "..."
    case .endOfFile:
      return ""
    case .equal:
      return "="
    case .exclamationMark:
      return "!"
    case .infixQuestionMark:
      return "?"
    case .leftAngle:
      return "<"
    case .leftBrace:
      return "{"
    case .leftParen:
      return "("
    case .leftSquare:
      return "["
    case .multilineStringQuote:
      return #"""""#
    case .period:
      return "."
    case .postfixQuestionMark:
      return "?"
    case .pound:
      return "#"
    case .poundAvailable:
      return "#available"
    case .poundElse:
      return "#else"
    case .poundElseif:
      return "#elseif"
    case .poundEndif:
      return "#endif"
    case .poundIf:
      return "#if"
    case .poundSourceLocation:
      return "#sourceLocation"
    case .poundUnavailable:
      return "#unavailable"
    case .prefixAmpersand:
      return "&"
    case .regexSlash:
      return "/"
    case .rightAngle:
      return ">"
    case .rightBrace:
      return "}"
    case .rightParen:
      return ")"
    case .rightSquare:
      return "]"
    case .semicolon:
      return ";"
    case .singleQuote:
      return "'"
    case .stringQuote:
      return #"""#
    case .wildcard:
      return "_"
    case .__consumingKeyword:
      return "__consuming"
    case .__ownedKeyword:
      return "__owned"
    case .__setter_accessKeyword:
      return "__setter_access"
    case .__sharedKeyword:
      return "__shared"
    case ._alignmentKeyword:
      return "_alignment"
    case ._backDeployKeyword:
      return "_backDeploy"
    case ._borrowKeyword:
      return "_borrow"
    case ._borrowingKeyword:
      return "_borrowing"
    case ._cdeclKeyword:
      return "_cdecl"
    case ._ClassKeyword:
      return "_Class"
    case ._compilerInitializedKeyword:
      return "_compilerInitialized"
    case ._constKeyword:
      return "_const"
    case ._consumingKeyword:
      return "_consuming"
    case ._documentationKeyword:
      return "_documentation"
    case ._dynamicReplacementKeyword:
      return "_dynamicReplacement"
    case ._effectsKeyword:
      return "_effects"
    case ._exposeKeyword:
      return "_expose"
    case ._forwardKeyword:
      return "_forward"
    case ._implementsKeyword:
      return "_implements"
    case ._linearKeyword:
      return "_linear"
    case ._localKeyword:
      return "_local"
    case ._modifyKeyword:
      return "_modify"
    case ._moveKeyword:
      return "_move"
    case ._mutatingKeyword:
      return "_mutating"
    case ._NativeClassKeyword:
      return "_NativeClass"
    case ._NativeRefCountedObjectKeyword:
      return "_NativeRefCountedObject"
    case ._noMetadataKeyword:
      return "_noMetadata"
    case ._nonSendableKeyword:
      return "_nonSendable"
    case ._objcImplementationKeyword:
      return "_objcImplementation"
    case ._objcRuntimeNameKeyword:
      return "_objcRuntimeName"
    case ._opaqueReturnTypeOfKeyword:
      return "_opaqueReturnTypeOf"
    case ._optimizeKeyword:
      return "_optimize"
    case ._originallyDefinedInKeyword:
      return "_originallyDefinedIn"
    case ._PackageDescriptionKeyword:
      return "_PackageDescription"
    case ._privateKeyword:
      return "_private"
    case ._projectedValuePropertyKeyword:
      return "_projectedValueProperty"
    case ._readKeyword:
      return "_read"
    case ._RefCountedObjectKeyword:
      return "_RefCountedObject"
    case ._semanticsKeyword:
      return "_semantics"
    case ._specializeKeyword:
      return "_specialize"
    case ._spiKeyword:
      return "_spi"
    case ._spi_availableKeyword:
      return "_spi_available"
    case ._swift_native_objc_runtime_baseKeyword:
      return "_swift_native_objc_runtime_base"
    case ._TrivialKeyword:
      return "_Trivial"
    case ._TrivialAtMostKeyword:
      return "_TrivialAtMost"
    case ._typeEraserKeyword:
      return "_typeEraser"
    case ._unavailableFromAsyncKeyword:
      return "_unavailableFromAsync"
    case ._underlyingVersionKeyword:
      return "_underlyingVersion"
    case ._UnknownLayoutKeyword:
      return "_UnknownLayout"
    case ._versionKeyword:
      return "_version"
    case .accessesKeyword:
      return "accesses"
    case .actorKeyword:
      return "actor"
    case .addressWithNativeOwnerKeyword:
      return "addressWithNativeOwner"
    case .addressWithOwnerKeyword:
      return "addressWithOwner"
    case .anyKeyword:
      return "any"
    case .AnyKeyword:
      return "Any"
    case .asKeyword:
      return "as"
    case .assignmentKeyword:
      return "assignment"
    case .associatedtypeKeyword:
      return "associatedtype"
    case .associativityKeyword:
      return "associativity"
    case .asyncKeyword:
      return "async"
    case .attachedKeyword:
      return "attached"
    case .autoclosureKeyword:
      return "autoclosure"
    case .availabilityKeyword:
      return "availability"
    case .availableKeyword:
      return "available"
    case .awaitKeyword:
      return "await"
    case .backDeployedKeyword:
      return "backDeployed"
    case .beforeKeyword:
      return "before"
    case .blockKeyword:
      return "block"
    case .borrowingKeyword:
      return "borrowing"
    case .breakKeyword:
      return "break"
    case .canImportKeyword:
      return "canImport"
    case .caseKeyword:
      return "case"
    case .catchKeyword:
      return "catch"
    case .classKeyword:
      return "class"
    case .compilerKeyword:
      return "compiler"
    case .consumeKeyword:
      return "consume"
    case .copyKeyword:
      return "copy"
    case .consumingKeyword:
      return "consuming"
    case .continueKeyword:
      return "continue"
    case .convenienceKeyword:
      return "convenience"
    case .conventionKeyword:
      return "convention"
    case .cTypeKeyword:
      return "cType"
    case .defaultKeyword:
      return "default"
    case .deferKeyword:
      return "defer"
    case .deinitKeyword:
      return "deinit"
    case .deprecatedKeyword:
      return "deprecated"
    case .derivativeKeyword:
      return "derivative"
    case .didSetKeyword:
      return "didSet"
    case .differentiableKeyword:
      return "differentiable"
    case .distributedKeyword:
      return "distributed"
    case .doKeyword:
      return "do"
    case .dynamicKeyword:
      return "dynamic"
    case .eachKeyword:
      return "each"
    case .elseKeyword:
      return "else"
    case .enumKeyword:
      return "enum"
    case .escapingKeyword:
      return "escaping"
    case .exclusivityKeyword:
      return "exclusivity"
    case .exportedKeyword:
      return "exported"
    case .extensionKeyword:
      return "extension"
    case .fallthroughKeyword:
      return "fallthrough"
    case .falseKeyword:
      return "false"
    case .fileKeyword:
      return "file"
    case .fileprivateKeyword:
      return "fileprivate"
    case .finalKeyword:
      return "final"
    case .forKeyword:
      return "for"
    case .discardKeyword:
      return "discard"
    case .forwardKeyword:
      return "forward"
    case .funcKeyword:
      return "func"
    case .getKeyword:
      return "get"
    case .guardKeyword:
      return "guard"
    case .higherThanKeyword:
      return "higherThan"
    case .ifKeyword:
      return "if"
    case .importKeyword:
      return "import"
    case .inKeyword:
      return "in"
    case .indirectKeyword:
      return "indirect"
    case .infixKeyword:
      return "infix"
    case .initKeyword:
      return "init"
    case .initializesKeyword:
      return "initializes"
    case .inlineKeyword:
      return "inline"
    case .inoutKeyword:
      return "inout"
    case .internalKeyword:
      return "internal"
    case .introducedKeyword:
      return "introduced"
    case .isKeyword:
      return "is"
    case .isolatedKeyword:
      return "isolated"
    case .kindKeyword:
      return "kind"
    case .lazyKeyword:
      return "lazy"
    case .leftKeyword:
      return "left"
    case .letKeyword:
      return "let"
    case .lineKeyword:
      return "line"
    case .linearKeyword:
      return "linear"
    case .lowerThanKeyword:
      return "lowerThan"
    case .macroKeyword:
      return "macro"
    case .messageKeyword:
      return "message"
    case .metadataKeyword:
      return "metadata"
    case .moduleKeyword:
      return "module"
    case .mutableAddressWithNativeOwnerKeyword:
      return "mutableAddressWithNativeOwner"
    case .mutableAddressWithOwnerKeyword:
      return "mutableAddressWithOwner"
    case .mutatingKeyword:
      return "mutating"
    case .nilKeyword:
      return "nil"
    case .noasyncKeyword:
      return "noasync"
    case .noDerivativeKeyword:
      return "noDerivative"
    case .noescapeKeyword:
      return "noescape"
    case .noneKeyword:
      return "none"
    case .nonisolatedKeyword:
      return "nonisolated"
    case .nonmutatingKeyword:
      return "nonmutating"
    case .objcKeyword:
      return "objc"
    case .obsoletedKeyword:
      return "obsoleted"
    case .ofKeyword:
      return "of"
    case .openKeyword:
      return "open"
    case .operatorKeyword:
      return "operator"
    case .optionalKeyword:
      return "optional"
    case .overrideKeyword:
      return "override"
    case .packageKeyword:
      return "package"
    case .postfixKeyword:
      return "postfix"
    case .precedencegroupKeyword:
      return "precedencegroup"
    case .prefixKeyword:
      return "prefix"
    case .privateKeyword:
      return "private"
    case .ProtocolKeyword:
      return "Protocol"
    case .protocolKeyword:
      return "protocol"
    case .publicKeyword:
      return "public"
    case .reasyncKeyword:
      return "reasync"
    case .renamedKeyword:
      return "renamed"
    case .repeatKeyword:
      return "repeat"
    case .requiredKeyword:
      return "required"
    case ._resultDependsOnKeyword:
      return "_resultDependsOn"
    case ._resultDependsOnSelfKeyword:
      return "_resultDependsOnSelf"
    case .rethrowsKeyword:
      return "rethrows"
    case .retroactiveKeyword:
      return "retroactive"
    case .returnKeyword:
      return "return"
    case .reverseKeyword:
      return "reverse"
    case .rightKeyword:
      return "right"
    case .safeKeyword:
      return "safe"
    case .selfKeyword:
      return "self"
    case .SelfKeyword:
      return "Self"
    case .SendableKeyword:
      return "Sendable"
    case .setKeyword:
      return "set"
    case .someKeyword:
      return "some"
    case .sourceFileKeyword:
      return "sourceFile"
    case .spiKeyword:
      return "spi"
    case .spiModuleKeyword:
      return "spiModule"
    case .staticKeyword:
      return "static"
    case .structKeyword:
      return "struct"
    case .subscriptKeyword:
      return "subscript"
    case .superKeyword:
      return "super"
    case .swiftKeyword:
      return "swift"
    case .switchKeyword:
      return "switch"
    case .targetKeyword:
      return "target"
    case .thenKeyword:
      return "then"
    case .throwKeyword:
      return "throw"
    case .throwsKeyword:
      return "throws"
    case .transposeKeyword:
      return "transpose"
    case .trueKeyword:
      return "true"
    case .tryKeyword:
      return "try"
    case .TypeKeyword:
      return "Type"
    case .typealiasKeyword:
      return "typealias"
    case .unavailableKeyword:
      return "unavailable"
    case .uncheckedKeyword:
      return "unchecked"
    case .unownedKeyword:
      return "unowned"
    case .unsafeKeyword:
      return "unsafe"
    case .unsafeAddressKeyword:
      return "unsafeAddress"
    case .unsafeMutableAddressKeyword:
      return "unsafeMutableAddress"
    case .varKeyword:
      return "var"
    case .visibilityKeyword:
      return "visibility"
    case .weakKeyword:
      return "weak"
    case .whereKeyword:
      return "where"
    case .whileKeyword:
      return "while"
    case .willSetKeyword:
      return "willSet"
    case .witness_methodKeyword:
      return "witness_method"
    case .wrtKeyword:
      return "wrt"
    case .yieldKeyword:
      return "yield"
    default:
      return nil
    }
  }
  
  /// Returns `true` if the token is a Swift punctuator.
  ///
  /// Punctuation tokens generally separate identifiers from each other. For
  /// example, the '<' and '>' characters in a generic parameter list, or the
  /// quote characters in a string literal.
  public var isPunctuation: Bool {
    switch self {
    case .arrow:
      return true
    case .atSign:
      return true
    case .backslash:
      return true
    case .backtick:
      return true
    case .colon:
      return true
    case .comma:
      return true
    case .ellipsis:
      return true
    case .equal:
      return true
    case .exclamationMark:
      return true
    case .infixQuestionMark:
      return true
    case .leftAngle:
      return true
    case .leftBrace:
      return true
    case .leftParen:
      return true
    case .leftSquare:
      return true
    case .multilineStringQuote:
      return true
    case .period:
      return true
    case .postfixQuestionMark:
      return true
    case .pound:
      return true
    case .prefixAmpersand:
      return true
    case .regexSlash:
      return true
    case .rightAngle:
      return true
    case .rightBrace:
      return true
    case .rightParen:
      return true
    case .rightSquare:
      return true
    case .semicolon:
      return true
    case .singleQuote:
      return true
    case .stringQuote:
      return true
    default:
      return false
    }
  }
  
  /// Returns `true` if the token is a keyword.
  public var isKeywordKind: Bool {
    switch self {
    case .__consumingKeyword:
      return true
    case .__ownedKeyword:
      return true
    case .__setter_accessKeyword:
      return true
    case .__sharedKeyword:
      return true
    case ._alignmentKeyword:
      return true
    case ._backDeployKeyword:
      return true
    case ._borrowKeyword:
      return true
    case ._borrowingKeyword:
      return true
    case ._cdeclKeyword:
      return true
    case ._ClassKeyword:
      return true
    case ._compilerInitializedKeyword:
      return true
    case ._constKeyword:
      return true
    case ._consumingKeyword:
      return true
    case ._documentationKeyword:
      return true
    case ._dynamicReplacementKeyword:
      return true
    case ._effectsKeyword:
      return true
    case ._exposeKeyword:
      return true
    case ._forwardKeyword:
      return true
    case ._implementsKeyword:
      return true
    case ._linearKeyword:
      return true
    case ._localKeyword:
      return true
    case ._modifyKeyword:
      return true
    case ._moveKeyword:
      return true
    case ._mutatingKeyword:
      return true
    case ._NativeClassKeyword:
      return true
    case ._NativeRefCountedObjectKeyword:
      return true
    case ._noMetadataKeyword:
      return true
    case ._nonSendableKeyword:
      return true
    case ._objcImplementationKeyword:
      return true
    case ._objcRuntimeNameKeyword:
      return true
    case ._opaqueReturnTypeOfKeyword:
      return true
    case ._optimizeKeyword:
      return true
    case ._originallyDefinedInKeyword:
      return true
    case ._PackageDescriptionKeyword:
      return true
    case ._privateKeyword:
      return true
    case ._projectedValuePropertyKeyword:
      return true
    case ._readKeyword:
      return true
    case ._RefCountedObjectKeyword:
      return true
    case ._semanticsKeyword:
      return true
    case ._specializeKeyword:
      return true
    case ._spiKeyword:
      return true
    case ._spi_availableKeyword:
      return true
    case ._swift_native_objc_runtime_baseKeyword:
      return true
    case ._TrivialKeyword:
      return true
    case ._TrivialAtMostKeyword:
      return true
    case ._typeEraserKeyword:
      return true
    case ._unavailableFromAsyncKeyword:
      return true
    case ._underlyingVersionKeyword:
      return true
    case ._UnknownLayoutKeyword:
      return true
    case ._versionKeyword:
      return true
    case .accessesKeyword:
      return true
    case .actorKeyword:
      return true
    case .addressWithNativeOwnerKeyword:
      return true
    case .addressWithOwnerKeyword:
      return true
    case .anyKeyword:
      return true
    case .AnyKeyword:
      return true
    case .asKeyword:
      return true
    case .assignmentKeyword:
      return true
    case .associatedtypeKeyword:
      return true
    case .associativityKeyword:
      return true
    case .asyncKeyword:
      return true
    case .attachedKeyword:
      return true
    case .autoclosureKeyword:
      return true
    case .availabilityKeyword:
      return true
    case .availableKeyword:
      return true
    case .awaitKeyword:
      return true
    case .backDeployedKeyword:
      return true
    case .beforeKeyword:
      return true
    case .blockKeyword:
      return true
    case .borrowingKeyword:
      return true
    case .breakKeyword:
      return true
    case .canImportKeyword:
      return true
    case .caseKeyword:
      return true
    case .catchKeyword:
      return true
    case .classKeyword:
      return true
    case .compilerKeyword:
      return true
    case .consumeKeyword:
      return true
    case .copyKeyword:
      return true
    case .consumingKeyword:
      return true
    case .continueKeyword:
      return true
    case .convenienceKeyword:
      return true
    case .conventionKeyword:
      return true
    case .cTypeKeyword:
      return true
    case .defaultKeyword:
      return true
    case .deferKeyword:
      return true
    case .deinitKeyword:
      return true
    case .deprecatedKeyword:
      return true
    case .derivativeKeyword:
      return true
    case .didSetKeyword:
      return true
    case .differentiableKeyword:
      return true
    case .distributedKeyword:
      return true
    case .doKeyword:
      return true
    case .dynamicKeyword:
      return true
    case .eachKeyword:
      return true
    case .elseKeyword:
      return true
    case .enumKeyword:
      return true
    case .escapingKeyword:
      return true
    case .exclusivityKeyword:
      return true
    case .exportedKeyword:
      return true
    case .extensionKeyword:
      return true
    case .fallthroughKeyword:
      return true
    case .falseKeyword:
      return true
    case .fileKeyword:
      return true
    case .fileprivateKeyword:
      return true
    case .finalKeyword:
      return true
    case .forKeyword:
      return true
    case .discardKeyword:
      return true
    case .forwardKeyword:
      return true
    case .funcKeyword:
      return true
    case .getKeyword:
      return true
    case .guardKeyword:
      return true
    case .higherThanKeyword:
      return true
    case .ifKeyword:
      return true
    case .importKeyword:
      return true
    case .inKeyword:
      return true
    case .indirectKeyword:
      return true
    case .infixKeyword:
      return true
    case .initKeyword:
      return true
    case .initializesKeyword:
      return true
    case .inlineKeyword:
      return true
    case .inoutKeyword:
      return true
    case .internalKeyword:
      return true
    case .introducedKeyword:
      return true
    case .isKeyword:
      return true
    case .isolatedKeyword:
      return true
    case .kindKeyword:
      return true
    case .lazyKeyword:
      return true
    case .leftKeyword:
      return true
    case .letKeyword:
      return true
    case .lineKeyword:
      return true
    case .linearKeyword:
      return true
    case .lowerThanKeyword:
      return true
    case .macroKeyword:
      return true
    case .messageKeyword:
      return true
    case .metadataKeyword:
      return true
    case .moduleKeyword:
      return true
    case .mutableAddressWithNativeOwnerKeyword:
      return true
    case .mutableAddressWithOwnerKeyword:
      return true
    case .mutatingKeyword:
      return true
    case .nilKeyword:
      return true
    case .noasyncKeyword:
      return true
    case .noDerivativeKeyword:
      return true
    case .noescapeKeyword:
      return true
    case .noneKeyword:
      return true
    case .nonisolatedKeyword:
      return true
    case .nonmutatingKeyword:
      return true
    case .objcKeyword:
      return true
    case .obsoletedKeyword:
      return true
    case .ofKeyword:
      return true
    case .openKeyword:
      return true
    case .operatorKeyword:
      return true
    case .optionalKeyword:
      return true
    case .overrideKeyword:
      return true
    case .packageKeyword:
      return true
    case .postfixKeyword:
      return true
    case .precedencegroupKeyword:
      return true
    case .prefixKeyword:
      return true
    case .privateKeyword:
      return true
    case .ProtocolKeyword:
      return true
    case .protocolKeyword:
      return true
    case .publicKeyword:
      return true
    case .reasyncKeyword:
      return true
    case .renamedKeyword:
      return true
    case .repeatKeyword:
      return true
    case .requiredKeyword:
      return true
    case ._resultDependsOnKeyword:
      return true
    case ._resultDependsOnSelfKeyword:
      return true
    case .rethrowsKeyword:
      return true
    case .retroactiveKeyword:
      return true
    case .returnKeyword:
      return true
    case .reverseKeyword:
      return true
    case .rightKeyword:
      return true
    case .safeKeyword:
      return true
    case .selfKeyword:
      return true
    case .SelfKeyword:
      return true
    case .SendableKeyword:
      return true
    case .setKeyword:
      return true
    case .someKeyword:
      return true
    case .sourceFileKeyword:
      return true
    case .spiKeyword:
      return true
    case .spiModuleKeyword:
      return true
    case .staticKeyword:
      return true
    case .structKeyword:
      return true
    case .subscriptKeyword:
      return true
    case .superKeyword:
      return true
    case .swiftKeyword:
      return true
    case .switchKeyword:
      return true
    case .targetKeyword:
      return true
    case .thenKeyword:
      return true
    case .throwKeyword:
      return true
    case .throwsKeyword:
      return true
    case .transposeKeyword:
      return true
    case .trueKeyword:
      return true
    case .tryKeyword:
      return true
    case .TypeKeyword:
      return true
    case .typealiasKeyword:
      return true
    case .unavailableKeyword:
      return true
    case .uncheckedKeyword:
      return true
    case .unownedKeyword:
      return true
    case .unsafeKeyword:
      return true
    case .unsafeAddressKeyword:
      return true
    case .unsafeMutableAddressKeyword:
      return true
    case .varKeyword:
      return true
    case .visibilityKeyword:
      return true
    case .weakKeyword:
      return true
    case .whereKeyword:
      return true
    case .whileKeyword:
      return true
    case .willSetKeyword:
      return true
    case .witness_methodKeyword:
      return true
    case .wrtKeyword:
      return true
    case .yieldKeyword:
      return true
    default:
      return false
    }
  }
}

extension TokenKind {
  /// If the `rawKind` has a `defaultText`, `text` can be empty.
  @_spi(RawSyntax)
  public static func fromRaw(kind rawKind: RawTokenKind, text: SyntaxText) -> TokenKind {
    precondition(text.isEmpty || rawKind.defaultText == nil || rawKind.defaultText == text)
    switch rawKind {
    case .arrow:
      return .arrow
    case .atSign:
      return .atSign
    case .backslash:
      return .backslash
    case .backtick:
      return .backtick
    case .binaryOperator:
      return .binaryOperator(String(syntaxText: text))
    case .colon:
      return .colon
    case .comma:
      return .comma
    case .dollarIdentifier:
      return .dollarIdentifier(String(syntaxText: text))
    case .ellipsis:
      return .ellipsis
    case .endOfFile:
      return .endOfFile
    case .equal:
      return .equal
    case .exclamationMark:
      return .exclamationMark
    case .floatLiteral:
      return .floatLiteral(String(syntaxText: text))
    case .identifier:
      return .identifier(String(syntaxText: text))
    case .infixQuestionMark:
      return .infixQuestionMark
    case .integerLiteral:
      return .integerLiteral(String(syntaxText: text))
    case .leftAngle:
      return .leftAngle
    case .leftBrace:
      return .leftBrace
    case .leftParen:
      return .leftParen
    case .leftSquare:
      return .leftSquare
    case .multilineStringQuote:
      return .multilineStringQuote
    case .period:
      return .period
    case .postfixOperator:
      return .postfixOperator(String(syntaxText: text))
    case .postfixQuestionMark:
      return .postfixQuestionMark
    case .pound:
      return .pound
    case .poundAvailable:
      return .poundAvailable
    case .poundElse:
      return .poundElse
    case .poundElseif:
      return .poundElseif
    case .poundEndif:
      return .poundEndif
    case .poundIf:
      return .poundIf
    case .poundSourceLocation:
      return .poundSourceLocation
    case .poundUnavailable:
      return .poundUnavailable
    case .prefixAmpersand:
      return .prefixAmpersand
    case .prefixOperator:
      return .prefixOperator(String(syntaxText: text))
    case .rawStringPoundDelimiter:
      return .rawStringPoundDelimiter(String(syntaxText: text))
    case .regexLiteralPattern:
      return .regexLiteralPattern(String(syntaxText: text))
    case .regexPoundDelimiter:
      return .regexPoundDelimiter(String(syntaxText: text))
    case .regexSlash:
      return .regexSlash
    case .rightAngle:
      return .rightAngle
    case .rightBrace:
      return .rightBrace
    case .rightParen:
      return .rightParen
    case .rightSquare:
      return .rightSquare
    case .semicolon:
      return .semicolon
    case .shebang:
      return .shebang(String(syntaxText: text))
    case .singleQuote:
      return .singleQuote
    case .stringQuote:
      return .stringQuote
    case .stringSegment:
      return .stringSegment(String(syntaxText: text))
    case .unknown:
      return .unknown(String(syntaxText: text))
    case .wildcard:
      return .wildcard
    case .__consumingKeyword:
      return .keyword(.__consuming)
    case .__ownedKeyword:
      return .keyword(.__owned)
    case .__setter_accessKeyword:
      return .keyword(.__setter_access)
    case .__sharedKeyword:
      return .keyword(.__shared)
    case ._alignmentKeyword:
      return .keyword(._alignment)
    case ._backDeployKeyword:
      return .keyword(._backDeploy)
    case ._borrowKeyword:
      return .keyword(._borrow)
    case ._borrowingKeyword:
      return .keyword(._borrowing)
    case ._cdeclKeyword:
      return .keyword(._cdecl)
    case ._ClassKeyword:
      return .keyword(._Class)
    case ._compilerInitializedKeyword:
      return .keyword(._compilerInitialized)
    case ._constKeyword:
      return .keyword(._const)
    case ._consumingKeyword:
      return .keyword(._consuming)
    case ._documentationKeyword:
      return .keyword(._documentation)
    case ._dynamicReplacementKeyword:
      return .keyword(._dynamicReplacement)
    case ._effectsKeyword:
      return .keyword(._effects)
    case ._exposeKeyword:
      return .keyword(._expose)
    case ._forwardKeyword:
      return .keyword(._forward)
    case ._implementsKeyword:
      return .keyword(._implements)
    case ._linearKeyword:
      return .keyword(._linear)
    case ._localKeyword:
      return .keyword(._local)
    case ._modifyKeyword:
      return .keyword(._modify)
    case ._moveKeyword:
      return .keyword(._move)
    case ._mutatingKeyword:
      return .keyword(._mutating)
    case ._NativeClassKeyword:
      return .keyword(._NativeClass)
    case ._NativeRefCountedObjectKeyword:
      return .keyword(._NativeRefCountedObject)
    case ._noMetadataKeyword:
      return .keyword(._noMetadata)
    case ._nonSendableKeyword:
      return .keyword(._nonSendable)
    case ._objcImplementationKeyword:
      return .keyword(._objcImplementation)
    case ._objcRuntimeNameKeyword:
      return .keyword(._objcRuntimeName)
    case ._opaqueReturnTypeOfKeyword:
      return .keyword(._opaqueReturnTypeOf)
    case ._optimizeKeyword:
      return .keyword(._optimize)
    case ._originallyDefinedInKeyword:
      return .keyword(._originallyDefinedIn)
    case ._PackageDescriptionKeyword:
      return .keyword(._PackageDescription)
    case ._privateKeyword:
      return .keyword(._private)
    case ._projectedValuePropertyKeyword:
      return .keyword(._projectedValueProperty)
    case ._readKeyword:
      return .keyword(._read)
    case ._RefCountedObjectKeyword:
      return .keyword(._RefCountedObject)
    case ._semanticsKeyword:
      return .keyword(._semantics)
    case ._specializeKeyword:
      return .keyword(._specialize)
    case ._spiKeyword:
      return .keyword(._spi)
    case ._spi_availableKeyword:
      return .keyword(._spi_available)
    case ._swift_native_objc_runtime_baseKeyword:
      return .keyword(._swift_native_objc_runtime_base)
    case ._TrivialKeyword:
      return .keyword(._Trivial)
    case ._TrivialAtMostKeyword:
      return .keyword(._TrivialAtMost)
    case ._typeEraserKeyword:
      return .keyword(._typeEraser)
    case ._unavailableFromAsyncKeyword:
      return .keyword(._unavailableFromAsync)
    case ._underlyingVersionKeyword:
      return .keyword(._underlyingVersion)
    case ._UnknownLayoutKeyword:
      return .keyword(._UnknownLayout)
    case ._versionKeyword:
      return .keyword(._version)
    case .accessesKeyword:
      return .keyword(.accesses)
    case .actorKeyword:
      return .keyword(.actor)
    case .addressWithNativeOwnerKeyword:
      return .keyword(.addressWithNativeOwner)
    case .addressWithOwnerKeyword:
      return .keyword(.addressWithOwner)
    case .anyKeyword:
      return .keyword(.any)
    case .AnyKeyword:
      return .keyword(.Any)
    case .asKeyword:
      return .keyword(.as)
    case .assignmentKeyword:
      return .keyword(.assignment)
    case .associatedtypeKeyword:
      return .keyword(.associatedtype)
    case .associativityKeyword:
      return .keyword(.associativity)
    case .asyncKeyword:
      return .keyword(.async)
    case .attachedKeyword:
      return .keyword(.attached)
    case .autoclosureKeyword:
      return .keyword(.autoclosure)
    case .availabilityKeyword:
      return .keyword(.availability)
    case .availableKeyword:
      return .keyword(.available)
    case .awaitKeyword:
      return .keyword(.await)
    case .backDeployedKeyword:
      return .keyword(.backDeployed)
    case .beforeKeyword:
      return .keyword(.before)
    case .blockKeyword:
      return .keyword(.block)
    case .borrowingKeyword:
      return .keyword(.borrowing)
    case .breakKeyword:
      return .keyword(.break)
    case .canImportKeyword:
      return .keyword(.canImport)
    case .caseKeyword:
      return .keyword(.case)
    case .catchKeyword:
      return .keyword(.catch)
    case .classKeyword:
      return .keyword(.class)
    case .compilerKeyword:
      return .keyword(.compiler)
    case .consumeKeyword:
      return .keyword(.consume)
    case .copyKeyword:
      return .keyword(.copy)
    case .consumingKeyword:
      return .keyword(.consuming)
    case .continueKeyword:
      return .keyword(.continue)
    case .convenienceKeyword:
      return .keyword(.convenience)
    case .conventionKeyword:
      return .keyword(.convention)
    case .cTypeKeyword:
      return .keyword(.cType)
    case .defaultKeyword:
      return .keyword(.default)
    case .deferKeyword:
      return .keyword(.defer)
    case .deinitKeyword:
      return .keyword(.deinit)
    case .deprecatedKeyword:
      return .keyword(.deprecated)
    case .derivativeKeyword:
      return .keyword(.derivative)
    case .didSetKeyword:
      return .keyword(.didSet)
    case .differentiableKeyword:
      return .keyword(.differentiable)
    case .distributedKeyword:
      return .keyword(.distributed)
    case .doKeyword:
      return .keyword(.do)
    case .dynamicKeyword:
      return .keyword(.dynamic)
    case .eachKeyword:
      return .keyword(.each)
    case .elseKeyword:
      return .keyword(.else)
    case .enumKeyword:
      return .keyword(.enum)
    case .escapingKeyword:
      return .keyword(.escaping)
    case .exclusivityKeyword:
      return .keyword(.exclusivity)
    case .exportedKeyword:
      return .keyword(.exported)
    case .extensionKeyword:
      return .keyword(.extension)
    case .fallthroughKeyword:
      return .keyword(.fallthrough)
    case .falseKeyword:
      return .keyword(.false)
    case .fileKeyword:
      return .keyword(.file)
    case .fileprivateKeyword:
      return .keyword(.fileprivate)
    case .finalKeyword:
      return .keyword(.final)
    case .forKeyword:
      return .keyword(.for)
    case .discardKeyword:
      return .keyword(.discard)
    case .forwardKeyword:
      return .keyword(.forward)
    case .funcKeyword:
      return .keyword(.func)
    case .getKeyword:
      return .keyword(.get)
    case .guardKeyword:
      return .keyword(.guard)
    case .higherThanKeyword:
      return .keyword(.higherThan)
    case .ifKeyword:
      return .keyword(.if)
    case .importKeyword:
      return .keyword(.import)
    case .inKeyword:
      return .keyword(.in)
    case .indirectKeyword:
      return .keyword(.indirect)
    case .infixKeyword:
      return .keyword(.infix)
    case .initKeyword:
      return .keyword(.`init`)
    case .initializesKeyword:
      return .keyword(.initializes)
    case .inlineKeyword:
      return .keyword(.inline)
    case .inoutKeyword:
      return .keyword(.inout)
    case .internalKeyword:
      return .keyword(.internal)
    case .introducedKeyword:
      return .keyword(.introduced)
    case .isKeyword:
      return .keyword(.is)
    case .isolatedKeyword:
      return .keyword(.isolated)
    case .kindKeyword:
      return .keyword(.kind)
    case .lazyKeyword:
      return .keyword(.lazy)
    case .leftKeyword:
      return .keyword(.left)
    case .letKeyword:
      return .keyword(.let)
    case .lineKeyword:
      return .keyword(.line)
    case .linearKeyword:
      return .keyword(.linear)
    case .lowerThanKeyword:
      return .keyword(.lowerThan)
    case .macroKeyword:
      return .keyword(.macro)
    case .messageKeyword:
      return .keyword(.message)
    case .metadataKeyword:
      return .keyword(.metadata)
    case .moduleKeyword:
      return .keyword(.module)
    case .mutableAddressWithNativeOwnerKeyword:
      return .keyword(.mutableAddressWithNativeOwner)
    case .mutableAddressWithOwnerKeyword:
      return .keyword(.mutableAddressWithOwner)
    case .mutatingKeyword:
      return .keyword(.mutating)
    case .nilKeyword:
      return .keyword(.nil)
    case .noasyncKeyword:
      return .keyword(.noasync)
    case .noDerivativeKeyword:
      return .keyword(.noDerivative)
    case .noescapeKeyword:
      return .keyword(.noescape)
    case .noneKeyword:
      return .keyword(.none)
    case .nonisolatedKeyword:
      return .keyword(.nonisolated)
    case .nonmutatingKeyword:
      return .keyword(.nonmutating)
    case .objcKeyword:
      return .keyword(.objc)
    case .obsoletedKeyword:
      return .keyword(.obsoleted)
    case .ofKeyword:
      return .keyword(.of)
    case .openKeyword:
      return .keyword(.open)
    case .operatorKeyword:
      return .keyword(.operator)
    case .optionalKeyword:
      return .keyword(.optional)
    case .overrideKeyword:
      return .keyword(.override)
    case .packageKeyword:
      return .keyword(.package)
    case .postfixKeyword:
      return .keyword(.postfix)
    case .precedencegroupKeyword:
      return .keyword(.precedencegroup)
    case .prefixKeyword:
      return .keyword(.prefix)
    case .privateKeyword:
      return .keyword(.private)
    case .ProtocolKeyword:
      return .keyword(.Protocol)
    case .protocolKeyword:
      return .keyword(.protocol)
    case .publicKeyword:
      return .keyword(.public)
    case .reasyncKeyword:
      return .keyword(.reasync)
    case .renamedKeyword:
      return .keyword(.renamed)
    case .repeatKeyword:
      return .keyword(.repeat)
    case .requiredKeyword:
      return .keyword(.required)
    case ._resultDependsOnKeyword:
      return .keyword(._resultDependsOn)
    case ._resultDependsOnSelfKeyword:
      return .keyword(._resultDependsOnSelf)
    case .rethrowsKeyword:
      return .keyword(.rethrows)
    case .retroactiveKeyword:
      return .keyword(.retroactive)
    case .returnKeyword:
      return .keyword(.return)
    case .reverseKeyword:
      return .keyword(.reverse)
    case .rightKeyword:
      return .keyword(.right)
    case .safeKeyword:
      return .keyword(.safe)
    case .selfKeyword:
      return .keyword(.self)
    case .SelfKeyword:
      return .keyword(.Self)
    case .SendableKeyword:
      return .keyword(.Sendable)
    case .setKeyword:
      return .keyword(.set)
    case .someKeyword:
      return .keyword(.some)
    case .sourceFileKeyword:
      return .keyword(.sourceFile)
    case .spiKeyword:
      return .keyword(.spi)
    case .spiModuleKeyword:
      return .keyword(.spiModule)
    case .staticKeyword:
      return .keyword(.static)
    case .structKeyword:
      return .keyword(.struct)
    case .subscriptKeyword:
      return .keyword(.subscript)
    case .superKeyword:
      return .keyword(.super)
    case .swiftKeyword:
      return .keyword(.swift)
    case .switchKeyword:
      return .keyword(.switch)
    case .targetKeyword:
      return .keyword(.target)
    case .thenKeyword:
      return .keyword(.then)
    case .throwKeyword:
      return .keyword(.throw)
    case .throwsKeyword:
      return .keyword(.throws)
    case .transposeKeyword:
      return .keyword(.transpose)
    case .trueKeyword:
      return .keyword(.true)
    case .tryKeyword:
      return .keyword(.try)
    case .TypeKeyword:
      return .keyword(.Type)
    case .typealiasKeyword:
      return .keyword(.typealias)
    case .unavailableKeyword:
      return .keyword(.unavailable)
    case .uncheckedKeyword:
      return .keyword(.unchecked)
    case .unownedKeyword:
      return .keyword(.unowned)
    case .unsafeKeyword:
      return .keyword(.unsafe)
    case .unsafeAddressKeyword:
      return .keyword(.unsafeAddress)
    case .unsafeMutableAddressKeyword:
      return .keyword(.unsafeMutableAddress)
    case .varKeyword:
      return .keyword(.var)
    case .visibilityKeyword:
      return .keyword(.visibility)
    case .weakKeyword:
      return .keyword(.weak)
    case .whereKeyword:
      return .keyword(.where)
    case .whileKeyword:
      return .keyword(.while)
    case .willSetKeyword:
      return .keyword(.willSet)
    case .witness_methodKeyword:
      return .keyword(.witness_method)
    case .wrtKeyword:
      return .keyword(.wrt)
    case .yieldKeyword:
      return .keyword(.yield)
    }
  }
  
  /// Returns the ``RawTokenKind`` of this ``TokenKind`` and, if this ``TokenKind``
  /// has associated text, the associated text, otherwise `nil`.
  @_spi(RawSyntax)
  public func decomposeToRaw() -> (rawKind: RawTokenKind, string: String?) {
    switch self {
    case .arrow:
      return (.arrow, nil)
    case .atSign:
      return (.atSign, nil)
    case .backslash:
      return (.backslash, nil)
    case .backtick:
      return (.backtick, nil)
    case .binaryOperator(let str):
      return (.binaryOperator, str)
    case .colon:
      return (.colon, nil)
    case .comma:
      return (.comma, nil)
    case .dollarIdentifier(let str):
      return (.dollarIdentifier, str)
    case .ellipsis:
      return (.ellipsis, nil)
    case .endOfFile:
      return (.endOfFile, nil)
    case .equal:
      return (.equal, nil)
    case .exclamationMark:
      return (.exclamationMark, nil)
    case .floatLiteral(let str):
      return (.floatLiteral, str)
    case .identifier(let str):
      return (.identifier, str)
    case .infixQuestionMark:
      return (.infixQuestionMark, nil)
    case .integerLiteral(let str):
      return (.integerLiteral, str)
    case .keyword(let keyword):
      return (keyword.rawTokenKind, String(syntaxText: keyword.defaultText))
    case .leftAngle:
      return (.leftAngle, nil)
    case .leftBrace:
      return (.leftBrace, nil)
    case .leftParen:
      return (.leftParen, nil)
    case .leftSquare:
      return (.leftSquare, nil)
    case .multilineStringQuote:
      return (.multilineStringQuote, nil)
    case .period:
      return (.period, nil)
    case .postfixOperator(let str):
      return (.postfixOperator, str)
    case .postfixQuestionMark:
      return (.postfixQuestionMark, nil)
    case .pound:
      return (.pound, nil)
    case .poundAvailable:
      return (.poundAvailable, nil)
    case .poundElse:
      return (.poundElse, nil)
    case .poundElseif:
      return (.poundElseif, nil)
    case .poundEndif:
      return (.poundEndif, nil)
    case .poundIf:
      return (.poundIf, nil)
    case .poundSourceLocation:
      return (.poundSourceLocation, nil)
    case .poundUnavailable:
      return (.poundUnavailable, nil)
    case .prefixAmpersand:
      return (.prefixAmpersand, nil)
    case .prefixOperator(let str):
      return (.prefixOperator, str)
    case .rawStringPoundDelimiter(let str):
      return (.rawStringPoundDelimiter, str)
    case .regexLiteralPattern(let str):
      return (.regexLiteralPattern, str)
    case .regexPoundDelimiter(let str):
      return (.regexPoundDelimiter, str)
    case .regexSlash:
      return (.regexSlash, nil)
    case .rightAngle:
      return (.rightAngle, nil)
    case .rightBrace:
      return (.rightBrace, nil)
    case .rightParen:
      return (.rightParen, nil)
    case .rightSquare:
      return (.rightSquare, nil)
    case .semicolon:
      return (.semicolon, nil)
    case .shebang(let str):
      return (.shebang, str)
    case .singleQuote:
      return (.singleQuote, nil)
    case .stringQuote:
      return (.stringQuote, nil)
    case .stringSegment(let str):
      return (.stringSegment, str)
    case .unknown(let str):
      return (.unknown, str)
    case .wildcard:
      return (.wildcard, nil)
    }
  }
}
